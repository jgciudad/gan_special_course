# -*- coding: utf-8 -*-
"""
Created on Thu Mar 10 19:14:07 2022

@author: javig
"""

import torch
import my_networks
import torch.nn as nn
from collections import OrderedDict
from image_pool import ImagePool
import functools
import itertools


class CycleGANModel():
    def __init__(self, 
                 isTrain = True,
                 gan_mode = 'lsgan',
                 learning_rate = 0.0002,
                 lambda_A = 10,
                 lambda_B = 10,
                 lambda_identity = 0.5,
                 input_nc = 3,
                 output_nc = 3,
                 ngf = 64,
                 ndf = 64,
                 norm_layer= functools.partial(nn.InstanceNorm2d, affine=False, track_running_stats=False), #functools.partial(nn.BatchNorm2d, affine=True, track_running_stats=True), 
                 dropout_G = False,
                 dropout_D = False,
                 label_flipping = False,
                 label_smoothing = False,
                 n_layers_D = 3):
        """Initialize the pix2pix class.

        Parameters:
            gan_mode: 'the type of GAN objective. vanilla| lsgan
            ngf: # of gen filters in the last conv layer'
            ndf # of discrim filters in the first conv layer
            learning_rate: 'initial learning rate for adam'
            input_nc_ # of input image channels: 3 for RGB and 1 for grayscale'
            output_nc: # of output image channels: 3 for RGB and 1 for grayscale'
            norm_layer normalization later for both discriminator and generator
            use_dropout use dropout in generator
        """        
        # define networks (both generator and discriminator)
        self.isTrain = isTrain
        self.device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
        self.gan_mode = gan_mode
        self.learning_rate = learning_rate
        self.optimizers = []
        self.lambda_A = lambda_A
        self.lambda_B = lambda_B
        self.lambda_identity = lambda_identity
        self.label_flipping = label_flipping
        self.label_smoothing = label_smoothing
        
        self.netG_A = my_networks.UnetGenerator(input_nc, output_nc, 8, ngf, norm_layer=norm_layer, use_dropout=dropout_G)
        self.netG_A = self.netG_A.to(self.device)
        
        self.netG_B = my_networks.UnetGenerator(output_nc, input_nc, 8, ngf, norm_layer=norm_layer, use_dropout=dropout_G)
        self.netG_B = self.netG_B.to(self.device)
        
        
        if self.isTrain: 
            self.netD_A = my_networks.NLayerDiscriminator(input_nc=output_nc, ndf=64, n_layers=n_layers_D, norm_layer=norm_layer, use_dropout=dropout_D)
            self.netD_A = self.netD_A.to(self.device)
            
            self.netD_B = my_networks.NLayerDiscriminator(input_nc=input_nc, ndf=64, n_layers=n_layers_D, norm_layer=norm_layer, use_dropout=dropout_D)
            self.netD_B = self.netD_B.to(self.device)
        
        
        if self.isTrain:
            self.fake_A_pool = ImagePool(pool_size = 50)  # create image buffer to store previously generated images
            self.fake_B_pool = ImagePool(pool_size = 50)
            
            self.criterionGAN = my_networks.GANLoss(self.gan_mode).to(self.device)
            self.criterionCycle = torch.nn.L1Loss()
            self.criterionIdt = torch.nn.L1Loss()

            self.optimizer_G = torch.optim.Adam(itertools.chain(self.netG_A.parameters(), self.netG_B.parameters()), self.learning_rate)
            self.optimizer_D = torch.optim.Adam(itertools.chain(self.netD_A.parameters(), self.netD_B.parameters()), self.learning_rate)
            self.optimizers.append(self.optimizer_G)
            self.optimizers.append(self.optimizer_D)
    
        
    def forward(self, real_A, real_B):
        """Run forward pass; called by both functions <optimize_parameters> and <test>."""
        fake_B = self.netG_A(real_A)  # G_A(A)
        rec_A = self.netG_B(fake_B)   # G_B(G_A(A))
        fake_A = self.netG_B(real_B)  # G_B(B)
        rec_B = self.netG_A(fake_A)   # G_A(G_B(B))
        
        return fake_B, rec_A, fake_A, rec_B
        
    
    def backward_D_basic(self, netD, real, fake):
        """Calculate GAN loss for the discriminator

        Parameters:
            netD (network)      -- the discriminator D
            real (tensor array) -- real images
            fake (tensor array) -- images generated by a generator

        Return the discriminator loss.
        We also call loss_D.backward() to calculate the gradients.
        """
        # Real
        pred_real = netD(real)
        loss_D_real = self.criterionGAN(pred_real, True)
        # Fake
        pred_fake = netD(fake.detach())
        loss_D_fake = self.criterionGAN(pred_fake, False)
        # Combined loss and calculate gradients
        loss_D = (loss_D_real + loss_D_fake) * 0.5
        loss_D.backward()
        
        return loss_D

    def backward_D_A(self, real_B, fake_B):
        """Calculate GAN loss for discriminator D_A"""
        fake_B = self.fake_B_pool.query(fake_B)
        self.loss_D_A = self.backward_D_basic(self.netD_A, real_B, fake_B)

    def backward_D_B(self, real_A, fake_A):
        """Calculate GAN loss for discriminator D_B"""
        fake_A = self.fake_A_pool.query(fake_A)
        self.loss_D_B = self.backward_D_basic(self.netD_B,real_A, fake_A)
   
    def backward_G(self, real_A, real_B, fake_B, fake_A, rec_A, rec_B):
        """Calculate the loss for generators G_A and G_B"""
        lambda_idt = self.lambda_identity
        lambda_A = self.lambda_A
        lambda_B = self.lambda_B
        # Identity loss
        if lambda_idt > 0:
            # G_A should be identity if real_B is fed: ||G_A(B) - B||
            idt_A = self.netG_A(real_B)
            self.loss_idt_A = self.criterionIdt(idt_A, real_B) * lambda_B * lambda_idt
            # G_B should be identity if real_A is fed: ||G_B(A) - A||
            idt_B = self.netG_B(real_A)
            self.loss_idt_B = self.criterionIdt(idt_B, real_A) * lambda_A * lambda_idt
        else:
            self.loss_idt_A = 0
            self.loss_idt_B = 0

        # GAN loss D_A(G_A(A))
        self.loss_G_A = self.criterionGAN(self.netD_A(fake_B), True)
        # GAN loss D_B(G_B(B))
        self.loss_G_B = self.criterionGAN(self.netD_B(fake_A), True)
        # Forward cycle loss || G_B(G_A(A)) - A||
        self.loss_cycle_A = self.criterionCycle(rec_A, real_A) * lambda_A
        # Backward cycle loss || G_A(G_B(B)) - B||
        self.loss_cycle_B = self.criterionCycle(rec_B, real_B) * lambda_B
        # combined loss and calculate gradients
        self.loss_G = self.loss_G_A + self.loss_G_B + self.loss_cycle_A + self.loss_cycle_B + self.loss_idt_A + self.loss_idt_B
        self.loss_G.backward()

        
    def optimize_parameters(self, real_A, real_B):
        """Calculate losses, gradients, and update network weights; called in every training iteration"""
        # forward
        fake_B, rec_A, fake_A, rec_B = self.forward(real_A, real_B)      # compute fake images and reconstruction images.
        # G_A and G_B
        self.set_requires_grad([self.netD_A, self.netD_B], False)  # Ds require no gradients when optimizing Gs
        self.optimizer_G.zero_grad()  # set G_A and G_B's gradients to zero
        self.backward_G(real_A, real_B, fake_B, fake_A, rec_A, rec_B)             # calculate gradients for G_A and G_B
        self.optimizer_G.step()       # update G_A and G_B's weights
        # D_A and D_B
        self.set_requires_grad([self.netD_A, self.netD_B], True)
        self.optimizer_D.zero_grad()   # set D_A and D_B's gradients to zero
        self.backward_D_A(real_B, fake_B)      # calculate gradients for D_A
        self.backward_D_B(real_A, fake_A)      # calculate graidents for D_B
        self.optimizer_D.step()  # update D_A and D_B's weights
        
    def get_current_losses(self, loss_names = ['D_A', 'G_A', 'cycle_A', 'idt_A', 'D_B', 'G_B', 'cycle_B', 'idt_B', 'G']):
        """Return traning losses / errors. train.py will print out these errors on console, and save them to a file"""
        errors_ret = OrderedDict()
        for name in loss_names:
            if isinstance(name, str):
                errors_ret[name] = float(getattr(self, 'loss_' + name))  # float(...) works for both scalar tensor and float number
        return errors_ret
    
    def set_requires_grad(self, nets, requires_grad=False):
        """Set requies_grad=Fasle for all the networks to avoid unnecessary computations
        Parameters:
            nets (network list)   -- a list of networks
            requires_grad (bool)  -- whether the networks require gradients or not
        """
        if not isinstance(nets, list):
            nets = [nets]
        for net in nets:
            if net is not None:
                for param in net.parameters():
                    param.requires_grad = requires_grad

        